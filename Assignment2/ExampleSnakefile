
genome_db = "/staging/leuven/stg_00079/teaching/hg19_9/chr9.fa"

sample_names, = glob_wildcards("000.fastq/{name}.fastq")

snpeff_jar = ("/lustre1/project/stg_00079/teaching/miniconda3/pkgs"
              + "/snpeff-5.1-hdfd78af_2/share/snpeff-5.1-2/snpEff.jar")
snpeff_db_folder = "/staging/leuven/stg_00079/teaching/snpeff_db/"


rule all:
    input:
        fastqc_zip=expand(
            "010.fastqc/{name}_fastqc.zip",
            name=sample_names),
        summary_png=expand(
            "010.fastqc/{name}_fastqc/summary.png", name=sample_names),
        vcf = "050.snpeff/snps.annotated.vcf",


rule fastqc:
    input:
        fq="000.fastq/{name}.fastq"

    output:
        zip="010.fastqc/{name}_fastqc.zip",
        html="010.fastqc/{name}_fastqc.html",
        summarytxt="010.fastqc/{name}_fastqc/summary.txt",
        basequal=report("010.fastqc/{name}_fastqc/Images/per_base_quality.png",
                        category='FastQC',
                        subcategory='Per base quality',
                        labels={"sample": "{name}"})

    shell:
        """
        echo "Input Fastq: {input.fq} "
        fastqc -o 010.fastqc {input.fq}

        echo "Unzip the output"
        ( cd 010.fastqc ; unzip -o {wildcards.name}_fastqc.zip )

        # grep WARN 010.fastqc/{wildcards.name}_fastqc/summary.txt && false
        """


rule fastqc_report_image:
    input:
        summarytxt="010.fastqc/{name}_fastqc/summary.txt"
    output:
        statuspng=report("010.fastqc/{name}_fastqc/summary.png",
                         category='FastQC',
                         subcategory='Status',
                         labels={"sample": "{name}"})

    run:
        import pandas as pd
        import seaborn as sns
        import matplotlib.pyplot as plt

        #load data
        data = pd.read_csv(input.summarytxt, sep="\t", header=None)
        data.columns = ['status', 'test', 'sample']

        #assign dummy x value for scatterplot
        data['x'] = 1

        #create image
        fig = plt.figure(figsize=(4,5))
        ax = plt.gca()
        sns.scatterplot(data, x='x', y='test', hue='status', s=200, ax=ax)
        ax.get_xaxis().set_visible(False)
        ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
        plt.tight_layout()
        plt.title(wildcards.name)
        plt.savefig(output.statuspng)


rule bwa:
    input:
        fq="000.fastq/{sample}.fastq",
    output:
        bam = "020.bwa/{sample}.bam",
        bai = "020.bwa/{sample}.bam.bai",
    params:
        db=genome_db,
    shell:
        """
        bwa mem {params.db} {input.fq} \
            | samtools sort - \
            > {output.bam}
        samtools index {output.bam}
        """

rule variant_calling:
    input:
        db=genome_db,
        bams=expand("020.bwa/{sample}.bam", sample=sample_names),
    output:
        vcf="030.samtools/snps.vcf",
    shell:
        """
        bcftools mpileup -Ou -f {input.db} {input.bams} \
             | bcftools call -mv -Ov -o {output.vcf}
        """


rule variant_cleanup:
    input:
        db=genome_db,
        vcf="030.samtools/snps.vcf"
    output:
        vcf="040.cleaned/snps.cleaned.vcf"
    shell:
        """
        ( cat {input.vcf} \
           | vt decompose - \
           | vt normalize -n -r {input.db} - \
           | vt uniq - \
           | vt view -f "QUAL>20" -h - \
           > {output.vcf} )
        """


rule snpeff:
    input:
        vcf = "040.cleaned/snps.cleaned.vcf",
    params:
        snpeff_db_folder = snpeff_db_folder,
        snpeff_jar = snpeff_jar,
    log:
        err="050.snpeff/snakemake.err",
    output:
        vcf = "050.snpeff/snps.annotated.vcf",
        html = "050.snpeff/snpEff_summary.html",
        genetxt = "050.snpeff/snpEff_genes.txt",
    shell:
        """

        mkdir -p 050.snpeff

        java -Xmx4096m -jar \
            {params.snpeff_jar} eff hg19 \
            -dataDir {params.snpeff_db_folder} \
            {input.vcf} > {output.vcf}

        # move output files to the snpeff output folder
        mv snpEff_genes.txt snpEff_summary.html 050.snpeff

        """